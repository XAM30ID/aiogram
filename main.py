import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram import F
from aiogram.enums import ParseMode
from aiogram.types.input_file import FSInputFile    

import json

from shifts import Shifts

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token="2134346269:AAHZjpA_PNUnUCJ1pSiBkd76ifpsodEUbro")
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

NEW_POST = False
SHIFT_ADDING = False


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
def is_admin(user_id):
    with open("info.json", "r") as f:
        admins = json.load(f)["admins"]
    return user_id in admins

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    global SHIFT_ADDING, NEW_POST
    SHIFT_ADDING, NEW_POST = False, False
    if is_admin(message.from_user.id):
        #  –ß–∞—Å—Ç—å –¥–ª—è –∞–¥–º–∏–Ω–∞
        kb = [
            [types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É üì£")],
            [types.KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ ‚öôÔ∏è")]
        ]

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, 
                                            one_time_keyboard=True,
                                            keyboard=kb)
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç, —Ç—ã - –∞–¥–º–∏–Ω –∏ –ø–æ—ç—Ç–æ–º—É —Ç—ã –≤–∏–¥–∏—à—å —ç—Ç–æ.\
                            \n–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard)

    else:
        #  –ß–∞—Å—Ç—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        kb = [
            [types.KeyboardButton(text="–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ üëã")],
            [types.KeyboardButton(text="–Ø —É–∂–µ –±—ã–≤–∞–ª—ã–π üòé")]
        ]

        keyboard = types.ReplyKeyboardMarkup(input_field_placeholder="–í—ã –±—ã–ª–∏ –≤ –ª–∞–≥–µ—Ä–µ '–ù–∏–∫–∞'?",
                                            resize_keyboard=True, 
                                            one_time_keyboard=True,
                                            keyboard=kb)

        await message.answer("üòâ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n–í—ã —É–∂–µ –±—ã–ª–∏ —É –Ω–∞—Å?", 
                            reply_markup=keyboard)


@dp.message(F.text == "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ ‚öôÔ∏è")
async def set_the_bot(message: types.Message):
    kb = [
        [types.InlineKeyboardButton(callback_data="set_shifts", text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–º–µ–Ω—ã üìù")],
        [types.InlineKeyboardButton(callback_data="set_texts", text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞ üí¨")]
    ]

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    
    await message.answer("–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?", 
                         parse_mode=ParseMode.MARKDOWN_V2, 
                         reply_markup=keyboard)
    

@dp.callback_query(F.data == "set_shifts")
async def shifts_settings(callback: types.CallbackQuery):
    kb = [
        [types.InlineKeyboardButton(callback_data="add_shift", text="–î–æ–±–∞–≤–∏—Ç—å —Å–º–µ–Ω—É ‚ûï")],
        [types.InlineKeyboardButton(callback_data="edit_shifts", text="–ò–∑–º–µ–Ω–∏—Ç—å —Å–º–µ–Ω—ã üìù")]
    ]

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)

    with open("info.json", "r") as f:
        shifts_list = json.load(f)["shifts"]
    if len(shifts_list) == 0:
        mess_text = "–°–ø–∏—Å–æ–∫ —Å–º–µ–Ω –ø—É—Å—Ç"
    else:
        mess_text = '–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Å–º–µ–Ω:'
        for shift in shifts_list:
            mess_text += f"{shift["title"]}"
    await callback.message.edit_text(text=mess_text, reply_markup=keyboard)


@dp.callback_query(F.data == "add_shift")
async def shift_adding(callback: types.CallbackQuery):
    global SHIFT_ADDING
    SHIFT_ADDING = True
    await callback.message.edit_text(text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å <code>&</code> \
            –ù–∞–∑–≤–∞–Ω–∏–µ, –º–µ—Å—Ç–æ, —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ä–º—É, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–∞—Ç—ã (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥-–¥–¥.–º–º.–≥–≥), \
            –∑–∞–º–µ—Ç–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–∏—Ö –≤–∏–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –í—ã)\n–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–û—Ç–º–µ–Ω–∞'", 
            parse_mode="html", reply_markup=None)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
@dp.message(F.text == "–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ üëã")
async def for_news(message: types.Message):
    kb = [
        [types.InlineKeyboardButton(callback_data="more_about", text="–•–æ—á—É —É–∑–Ω–∞—Ç—å –ø—Ä–æ —Å–º–µ–Ω—ã üåÑ")],
        [types.InlineKeyboardButton(callback_data="profile", text="–•–æ—á—É —É–∑–Ω–∞—Ç—å –ø—Ä–æ –ø—Ä–æ—Ñ–∏–ª—å –ª–∞–≥–µ—Ä—è ü§î")]
    ]

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    
    await message.answer("_*–ö–ê–ö–û–ô‚Äì–¢–û –î–û–ö–£–ú–ï–ù–¢*_", 
                         parse_mode=ParseMode.MARKDOWN_V2, 
                         reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message(F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É üì£")
async def for_news(message: types.Message):
    global NEW_POST
    if is_admin(message.from_user.id):
        kb = [
            [types.InlineKeyboardButton(callback_data="cancel_posting", text="–û—Ç–º–µ–Ω–∞ ‚Ü©Ô∏è")]
        ]

        keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
        
        await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", 
                            parse_mode=ParseMode.MARKDOWN_V2, 
                            reply_markup=keyboard)
        NEW_POST = True
        


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ –ø—Ä–æ—Ñ–∏–ª—å –ª–∞–≥–µ—Ä—è
@dp.callback_query(F.data == "profile")
async def about_profile(callback: types.CallbackQuery):
    kb = [
            [types.InlineKeyboardButton(callback_data="more_about", text="–•–æ—á—É —É–∑–Ω–∞—Ç—å –ø—Ä–æ —Å–º–µ–Ω—ã üåÑ")],
        ]

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    
    f = FSInputFile("static\\images\\gojo.jpg")
    await callback.message.answer_photo(photo=f, caption="_*–ö–ê–ö–ê–Ø‚Äì–¢–û –ò–ù–§–ê*_",
                               parse_mode=ParseMode.MARKDOWN_V2, 
                               reply_markup=keyboard)
    await callback.message.delete()
    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å—Ç–∞—Ä–µ–Ω—å–∫–∏—Ö –∏ –æ —Å–º–µ–Ω–∞—Ö
@dp.message(F.text == "–Ø —É–∂–µ –±—ã–≤–∞–ª—ã–π üòé")
async def for_olds(message: types.Message):
    kb = [
        [types.InlineKeyboardButton(callback_data="cost", text="–ö–∞–∫–∏–µ —Ü–µ–Ω—ã –Ω–∞ —Å–º–µ–Ω—ã? ü™ô")],
        [types.InlineKeyboardButton(callback_data="where", text="–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∞–≥–µ—Ä—å? üß≠")],
        [types.InlineKeyboardButton(callback_data="other", text="–î—Ä—É–≥–æ–µ")]
    ]

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    await message.answer("_*–°–ü–ò–°–û–ö –°–ú–ï–ù –° –ö–†–ê–¢–ö–ò–ú –û–ü–ò–°–ê–ù–ò–ï–ú*_", 
                            parse_mode=ParseMode.MARKDOWN_V2, 
                            reply_markup=keyboard)
    await message.delete()

@dp.callback_query(F.data == "more_about")
async def for_olds_cal(callback: types.CallbackQuery):
    kb = [
        [types.InlineKeyboardButton(callback_data="cost", text="–ö–∞–∫–∏–µ —Ü–µ–Ω—ã –Ω–∞ —Å–º–µ–Ω—ã? ü™ô")],
        [types.InlineKeyboardButton(callback_data="where", text="–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∞–≥–µ—Ä—å? üß≠")],
        [types.InlineKeyboardButton(callback_data="first_time_child", text="–î—Ä—É–≥–æ–µ")]
    ]

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    await callback.message.answer("_*–°–ü–ò–°–û–ö –°–ú–ï–ù –° –ö–†–ê–¢–ö–ò–ú –û–ü–ò–°–ê–ù–ò–ï–ú*_", 
                            parse_mode=ParseMode.MARKDOWN_V2, 
                            reply_markup=keyboard)  
    await callback.message.delete()  


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –º–µ—Å—Ç–æ–ª–ø–æ–ª–∂–µ–Ω–∏–µ –ª–∞–≥–µ—Ä—è
@dp.callback_query(F.data == "where")
async def where_camp(callback: types.CallbackQuery):
    kb = [
        [types.KeyboardButton(text="–ö–∞–∫–∏–µ —Ü–µ–Ω—ã –Ω–∞ —Å–º–µ–Ω—ã? ü™ô")],
        [types.KeyboardButton(text="–î—Ä—É–≥–æ–µ")]
    ]

    keyboard = types.ReplyKeyboardMarkup(input_field_placeholder="–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                                         resize_keyboard=True, 
                                         one_time_keyboard=True,
                                         keyboard=kb)
    
    await callback.message.answer_location(latitude=55.850127, longitude=52.405631)
    await callback.message.answer("*`–û–¶ '–°–ê–£–õ–´–ö'`*", 
                         parse_mode=ParseMode.MARKDOWN_V2, 
                         reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –¥—Ä—É–≥–æ–µ
@dp.message(F.text == "–î—Ä—É–≥–æ–µ")
async def for_olds(message: types.Message):
    kb = [
        [types.InlineKeyboardButton(callback_data="first_time_child", text="–°–º–æ–∂–µ—Ç –ª–∏ —Ä–µ–±–µ–Ω–æ–∫ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è? üë•")],
        [types.InlineKeyboardButton(callback_data="what_take", text="–ß—Ç–æ –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å –Ω–∞ —Å–º–µ–Ω—É? üìÉ")],
        [types.InlineKeyboardButton(callback_data="how_get_news", text="–ö–∞–∫ –∑–Ω–∞—Ç—å, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å–º–µ–Ω–µ? üì£")],
        [types.InlineKeyboardButton(callback_data="back", text="–í–µ—Ä–Ω—É—Ç—å—Å—è ‚Ü©Ô∏è")]
    ]

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    
    await message.answer("–° –∫–∞–∫–∏–º –∏–º–µ–Ω–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–º –í–∞–º –ø–æ–º–æ—á—å?", 
                         parse_mode=ParseMode.MARKDOWN_V2, 
                         reply_markup=keyboard)

# –ó–¥–µ—Å—å –ø—Ä–æ –ö–∏—Ä–æ—á–∫—É (—Å–ø–∞—Å–∏–±–æ —Ç–µ–±–µ, –µ—Å–ª–∏ —Ç—ã —ç—Ç–æ –≤–∏–¥–∏—à—å)
@dp.message(F.text == "–ü–æ—á–µ–º—É —Ç—ã —Ç–∞–∫ –ø—Ä–∏—Å—Ç–∞–ª—å–Ω–æ —Å–º–æ—Ç—Ä–∏—à—å –Ω–∞ —Å–≤–æ–∏ —á–∞—Å—ã?")
async def Kira_the_best(message: types.Message):
    text = """
–ß–∞—Å—ã?
–Ø –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ç–µ–ª —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è
–ü—Ä–æ—Å—Ç–æ, —è \- _*–ö–∏—Ä–∞*_"""
    await message.answer(text=text,
                         parse_mode=ParseMode.MARKDOWN_V2)


# @dp.message(content_types=types.ContentTypes.PHOTO)
# async def post(message: types.Message):
#     file_id = message.photo[0]['file_id']
#     if is_admin(message.from_user.id) and NEW_POST:
#         with open("info.json", "r") as f:
#             users = json.load(f)["users"]
#         for user in users:
#             if not is_admin(user):
#                 try:
#                     await bot.send_photo(chat_id=user, photo=file_id,
#                                         caption=message.caption)
#                 except Exception as e:
#                     pass
#     await message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –µ—â—ë –Ω–µ —Ç–∞–∫ —Ö–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞—é –í–∞—à —è–∑—ã–∫ üòñ",
#                          parse_mode=ParseMode.MARKDOWN_V2)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def else_messages(message: types.Message):
    global NEW_POST, SHIFT_ADDING 
    if is_admin(message.from_user.id) and NEW_POST:
        with open("info.json", "r") as f:
            users = json.load(f)["users"]
        for user in users:
            if not is_admin(user):
                try:
                    await bot.send_message(chat_id=user, text=message.text)
                except Exception as e:
                    pass
    await message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –µ—â—ë –Ω–µ —Ç–∞–∫ —Ö–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞—é –í–∞—à —è–∑—ã–∫ üòñ",
                         parse_mode=ParseMode.MARKDOWN_V2)


@dp.callback_query(F.data == "first_time_child")
async def send_random_value(callback: types.CallbackQuery):
    await callback.message.answer("_*–û–ü–ò–°–ê–ù–ò–ï, –ß–¢–û –í–°–Å –ë–£–î–ï–¢ –•–û–†–û–®–û*_", parse_mode=ParseMode.MARKDOWN_V2)

@dp.callback_query(F.data == "what_take")
async def send_random_value(callback: types.CallbackQuery):
    await callback.message.edit_text("_*–û–ü–ò–°–ê–ù–ò–ï, –ß–¢–û –° –°–û–ë–û–ô –ë–†–ê–¢–¨*_", parse_mode=ParseMode.MARKDOWN_V2)

@dp.callback_query(F.data == "how_get_news")
async def send_random_value(callback: types.CallbackQuery):
    await callback.message.edit_text("_*–£ –ù–ê–° –ë–£–î–ï–¢ –ì–†–£–ü–ü–ê*_", parse_mode=ParseMode.MARKDOWN_V2)

@dp.callback_query(F.data == "back")
async def send_random_value(callback: types.CallbackQuery):
    await callback.message.answer("asdasd")

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())